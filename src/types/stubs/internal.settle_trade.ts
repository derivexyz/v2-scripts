/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Used for settling matched orders to the blockchain by submitting them to the sequencer RPC.
 */
export type InternalSettleTrade = InternalSettleTradeJSONRPCSchema;
export type Method = 'internal/settle_trade';
export type AmountFilled = string;
export type Fee = string;
export type FilledAccount = number;
export type Price = string;
export type FillDetails = FillDetailsSchema[];
export type TakerAccount = number;
export type TakerFee = string;
export type BaseAssetName = string;
export type QuoteAssetName = string;
export type Asset = string;
export type DesiredAmount = string;
export type IsBid = boolean;
export type LimitPrice = string;
export type RecipientId = number;
export type SubId = number;
export type TradeId = string;
export type WorstFee = string;
export type Expiry = number;
export type Module = string;
export type Nonce = number;
export type Owner = string;
export type Signature = string;
export type Signer = string;
export type SubaccountId = number;
export type SignedOrders = SignedTradeOrderSchema[];
export type Status = 0 | 1 | 2;
export type TransactionHash = string | null;

export interface InternalSettleTradeJSONRPCSchema {
  request: InternalSettleTradeRequestSchema;
  response: InternalSettleTradeResponseSchema;
}
export interface InternalSettleTradeRequestSchema {
  id?: string | number;
  method: Method;
  params: InternalSettleTradeParamsSchema;
}
export interface InternalSettleTradeParamsSchema {
  action_data: ActionDataSchema;
  base_asset_name: BaseAssetName;
  quote_asset_name: QuoteAssetName;
  signed_orders: SignedOrders;
}
export interface ActionDataSchema {
  fill_details: FillDetails;
  taker_account: TakerAccount;
  taker_fee: TakerFee;
}
export interface FillDetailsSchema {
  amount_filled: AmountFilled;
  fee: Fee;
  filled_account: FilledAccount;
  price: Price;
}
export interface SignedTradeOrderSchema {
  data: TradeModuleDataSchema;
  expiry: Expiry;
  module: Module;
  nonce: Nonce;
  owner: Owner;
  signature: Signature;
  signer: Signer;
  subaccount_id: SubaccountId;
}
export interface TradeModuleDataSchema {
  asset: Asset;
  desired_amount: DesiredAmount;
  is_bid: IsBid;
  limit_price: LimitPrice;
  recipient_id: RecipientId;
  sub_id: SubId;
  trade_id: TradeId;
  worst_fee: WorstFee;
}
export interface InternalSettleTradeResponseSchema {
  id: string | number;
  result: InternalSettleTradeResultSchema;
}
export interface InternalSettleTradeResultSchema {
  status: Status;
  transaction_hash: TransactionHash;
}
