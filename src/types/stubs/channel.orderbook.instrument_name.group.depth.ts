/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Periodically publishes bids and asks for an instrument.
 */
export type OrderbookInstrumentNameGroupDepth = OrderbookInstrumentNameGroupDepthPubSubSchema;
/**
 * Number of price levels returned
 */
export type Depth = "1" | "10" | "20" | "50" | "100";
/**
 * Price grouping (rounding)
 */
export type Group = "1" | "10" | "100" | "500";
/**
 * Instrument name
 */
export type InstrumentName = string;
export type Method = string;
/**
 * Subscribed channel name
 */
export type Channel = string;
export type Asks2 = string;
export type Asks1 = Asks2[];
/**
 * List of asks as [price, amount] tuples optionally grouped into price buckets
 */
export type Asks = Asks1[];
export type Bids2 = string;
export type Bids1 = Bids2[];
/**
 * List of bids as [price, amount] tuples optionally grouped into price buckets
 */
export type Bids = Bids1[];
/**
 * Instrument name
 */
export type InstrumentName1 = string;
/**
 * Publish ID, incremented for each publish
 */
export type PublishId = number;
/**
 * Timestamp of the orderbook snapshot
 */
export type Timestamp = number;

export interface OrderbookInstrumentNameGroupDepthPubSubSchema {
  channel_params: OrderbookInstrumentNameGroupDepthChannelSchema;
  notification: OrderbookInstrumentNameGroupDepthNotificationSchema;
}
export interface OrderbookInstrumentNameGroupDepthChannelSchema {
  depth: Depth;
  group: Group;
  instrument_name: InstrumentName;
}
export interface OrderbookInstrumentNameGroupDepthNotificationSchema {
  method: Method;
  params: OrderbookInstrumentNameGroupDepthNotificationParamsSchema;
}
export interface OrderbookInstrumentNameGroupDepthNotificationParamsSchema {
  channel: Channel;
  data: OrderbookInstrumentNameGroupDepthPublisherDataSchema;
}
export interface OrderbookInstrumentNameGroupDepthPublisherDataSchema {
  asks: Asks;
  bids: Bids;
  instrument_name: InstrumentName1;
  publish_id: PublishId;
  timestamp: Timestamp;
}
