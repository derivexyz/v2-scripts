/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type InternalCreateInstrument = InternalCreateInstrumentJSONRPCSchema;
export type Method = "internal/create_instrument";
export type AmountStep = string;
export type BaseAsset = string;
export type EngineHeartbeatInterval = number;
export type InstrumentName = string;
export type IsActive = boolean;
export type MakerFee = string;
export type MaximumAmount = string;
export type MinimumAmount = string;
export type PriceBandSpotShock = string | null;
export type PublisherHeartbeatInterval = number;
export type QuoteAsset = string;
export type ScheduledActivation = number;
export type ScheduledDeactivation = number | null;
export type TakerFee = string;
export type TickDecimalPlaces = number;
/**
 * Minimum valid increment of order amount
 */
export type AmountStep1 = string;
/**
 * Blockchain address of the base asset
 */
export type BaseAssetAddress = string;
/**
 * Sub ID of the specific base asset as defined in Asset.sol
 */
export type BaseAssetSubId = string;
/**
 * Underlying currency of base asset (`ETH`, `BTC`, etc)
 */
export type BaseCurrency = string;
/**
 * Instrument name
 */
export type InstrumentName1 = string;
/**
 * `erc20`, `option`, or `perp`
 */
export type InstrumentType = "erc20" | "option" | "perp";
/**
 * If `True`: instrument is tradeable within `activation` and `deactivation` timestamps
 */
export type IsActive1 = boolean;
/**
 * Percent of spot price fee rate for makers
 */
export type MakerFeeRate = string;
/**
 * Percent of option price fee cap, e.g. 12.5%, null if not applicable
 */
export type MarkPriceFeeRateCap = string | null;
/**
 * Maximum valid amount of contracts / tokens per trade
 */
export type MaximumAmount1 = string;
/**
 * Minimum valid amount of contracts / tokens per trade
 */
export type MinimumAmount1 = string;
/**
 * Unix timestamp of expiry date (in seconds)
 */
export type Expiry = number;
/**
 * Underlying settlement price index
 */
export type Index = string;
export type OptionType = "C" | "P";
/**
 * Settlement price of the option
 */
export type SettlementPrice = string | null;
export type Strike = string;
/**
 * Latest aggregated funding as per `PerpAsset.sol`
 */
export type AggregateFunding = string;
/**
 * Current hourly funding rate as per `PerpAsset.sol`
 */
export type FundingRate = string;
/**
 * Underlying spot price index for funding rate
 */
export type Index1 = string;
/**
 * Max rate per hour as per `PerpAsset.sol`
 */
export type MaxRatePerHour = string;
/**
 * Min rate per hour as per `PerpAsset.sol`
 */
export type MinRatePerHour = string;
/**
 * Static interest rate as per `PerpAsset.sol`
 */
export type StaticInterestRate = string;
/**
 * Quote currency (`USD` for perps, `USDC` for options)
 */
export type QuoteCurrency = string;
/**
 * Timestamp at which became or will become active (if applicable)
 */
export type ScheduledActivation1 = number;
/**
 * Scheduled deactivation time for instrument (if applicable)
 */
export type ScheduledDeactivation1 = number;
/**
 * Percent of spot price fee rate for takers
 */
export type TakerFeeRate = string;
/**
 * Tick size of the instrument, i.e. minimum price increment
 */
export type TickSize = string;

export interface InternalCreateInstrumentJSONRPCSchema {
  request: InternalCreateInstrumentRequestSchema;
  response: InternalCreateInstrumentResponseSchema;
}
export interface InternalCreateInstrumentRequestSchema {
  id?: string | number;
  method: Method;
  params: InternalCreateInstrumentParamsSchema;
}
export interface InternalCreateInstrumentParamsSchema {
  amount_step: AmountStep;
  base_asset: BaseAsset;
  engine_heartbeat_interval: EngineHeartbeatInterval;
  instrument_name: InstrumentName;
  is_active: IsActive;
  maker_fee?: MakerFee;
  maximum_amount: MaximumAmount;
  minimum_amount: MinimumAmount;
  price_band_spot_shock?: PriceBandSpotShock;
  publisher_heartbeat_interval: PublisherHeartbeatInterval;
  quote_asset: QuoteAsset;
  scheduled_activation: ScheduledActivation;
  scheduled_deactivation?: ScheduledDeactivation;
  taker_fee?: TakerFee;
  tick_decimal_places: TickDecimalPlaces;
}
export interface InternalCreateInstrumentResponseSchema {
  id: string | number;
  result: InternalCreateInstrumentResultSchema;
}
export interface InternalCreateInstrumentResultSchema {
  amount_step: AmountStep1;
  base_asset_address: BaseAssetAddress;
  base_asset_sub_id: BaseAssetSubId;
  base_currency: BaseCurrency;
  instrument_name: InstrumentName1;
  instrument_type: InstrumentType;
  is_active: IsActive1;
  maker_fee_rate: MakerFeeRate;
  mark_price_fee_rate_cap?: MarkPriceFeeRateCap;
  maximum_amount: MaximumAmount1;
  minimum_amount: MinimumAmount1;
  option_details: OptionPublicDetailsSchema;
  perp_details: PerpPublicDetailsSchema;
  quote_currency: QuoteCurrency;
  scheduled_activation: ScheduledActivation1;
  scheduled_deactivation: ScheduledDeactivation1;
  taker_fee_rate: TakerFeeRate;
  tick_size: TickSize;
}
/**
 * Details of the option asset (if applicable)
 */
export interface OptionPublicDetailsSchema {
  expiry: Expiry;
  index: Index;
  option_type: OptionType;
  settlement_price?: SettlementPrice;
  strike: Strike;
}
/**
 * Details of the perp asset (if applicable)
 */
export interface PerpPublicDetailsSchema {
  aggregate_funding: AggregateFunding;
  funding_rate: FundingRate;
  index: Index1;
  max_rate_per_hour: MaxRatePerHour;
  min_rate_per_hour: MinRatePerHour;
  static_interest_rate: StaticInterestRate;
}
