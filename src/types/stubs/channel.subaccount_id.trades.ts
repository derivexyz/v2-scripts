/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Subscribe to user's trades (order executions) for a given subaccount ID.
 */
export type SubaccountIdTrades = SubaccountIdTradesPubSubSchema;
/**
 * Subaccount ID
 */
export type SubaccountId = number;
export type Method = string;
/**
 * Subscribed channel name
 */
export type Channel = string;
/**
 * Order direction
 */
export type Direction = 'buy' | 'sell';
/**
 * Index price of the underlying at the time of the trade
 */
export type IndexPrice = string;
/**
 * Instrument name
 */
export type InstrumentName = string;
/**
 * Whether the trade was generated through `private/transfer_position`
 */
export type IsTransfer = boolean;
/**
 * Optional user-defined label for the order
 */
export type Label = string;
/**
 * Role of the user in the trade
 */
export type LiquidityRole = 'maker' | 'taker';
/**
 * Mark price of the instrument at the time of the trade
 */
export type MarkPrice = string;
/**
 * Order ID
 */
export type OrderId = string;
/**
 * Realized PnL for this trade
 */
export type RealizedPnl = string;
/**
 * Subaccount ID
 */
export type SubaccountId1 = number;
/**
 * Trade timestamp (in ms since Unix epoch)
 */
export type Timestamp = number;
/**
 * Amount filled in this trade
 */
export type TradeAmount = string;
/**
 * Fee for this trade
 */
export type TradeFee = string;
/**
 * Trade ID
 */
export type TradeId = string;
/**
 * Price at which the trade was filled
 */
export type TradePrice = string;
/**
 * Blockchain transaction hash
 */
export type TxHash = string | null;
/**
 * Blockchain transaction status
 */
export type TxStatus = 'requested' | 'pending' | 'settled' | 'reverted' | 'ignored';
export type Data = TradeResponseSchema[];

export interface SubaccountIdTradesPubSubSchema {
  channel_params: SubaccountIdTradesChannelSchema;
  notification: SubaccountIdTradesNotificationSchema;
}
export interface SubaccountIdTradesChannelSchema {
  subaccount_id: SubaccountId;
}
export interface SubaccountIdTradesNotificationSchema {
  method: Method;
  params: SubaccountIdTradesNotificationParamsSchema;
}
export interface SubaccountIdTradesNotificationParamsSchema {
  channel: Channel;
  data: Data;
}
export interface TradeResponseSchema {
  direction: Direction;
  index_price: IndexPrice;
  instrument_name: InstrumentName;
  is_transfer: IsTransfer;
  label: Label;
  liquidity_role: LiquidityRole;
  mark_price: MarkPrice;
  order_id: OrderId;
  realized_pnl: RealizedPnl;
  subaccount_id: SubaccountId1;
  timestamp: Timestamp;
  trade_amount: TradeAmount;
  trade_fee: TradeFee;
  trade_id: TradeId;
  trade_price: TradePrice;
  tx_hash: TxHash;
  tx_status: TxStatus;
}
