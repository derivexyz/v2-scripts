/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Get latest signed data feeds
 */
export type PublicGetLatestSignedFeeds = PublicGetLatestSignedFeedsJSONRPCSchema;
export type Method = 'public/get_latest_signed_feeds';
/**
 * Currency
 */
export type Currency = string | null;
/**
 * The confidence score of the price
 */
export type Confidence = string;
/**
 * The currency for which the spot feed represents
 */
export type Currency1 = string;
/**
 * The latest time the data can be submitted on chain
 */
export type Deadline = number;
/**
 * The expiry for the forward feed
 */
export type Expiry = number;
/**
 * difference of forward price from current spot price
 */
export type FwdDiff = string;
export type Signatures1 = string;
/**
 * The signatures of the given signers
 */
export type Signatures = Signatures1[];
export type Signers1 = string;
/**
 * The signers who verify the data integrity
 */
export type Signers = Signers1[];
/**
 * expiry -> spot * time value at the latest timestamp
 */
export type SpotAggregateLatest = string;
/**
 * spot * time value at the start of the settlement period
 */
export type SpotAggregateStart = string;
/**
 * The timestamp for which the data was created
 */
export type Timestamp = number;
/**
 * The confidence score of the price
 */
export type Confidence1 = string;
/**
 * The currency for which the spot feed represents
 */
export type Currency2 = string;
/**
 * The latest time the data can be submitted on chain
 */
export type Deadline1 = number;
/**
 * The difference between the spot price and the perp price
 */
export type SpotDiffValue = string;
/**
 * The timestamp for which the data was created
 */
export type Timestamp1 = number;
/**
 * The type of perp feed; mid price, ask impact or bid impact
 */
export type Type = 'P' | 'A' | 'B';
/**
 * The confidence score of the price
 */
export type Confidence2 = string;
/**
 * The currency for which the spot feed represents
 */
export type Currency3 = string;
/**
 * The latest time the data can be submitted on chain
 */
export type Deadline2 = number;
/**
 * The price of the currency in USD
 */
export type Price = string;
/**
 * The timestamp for which the data was created
 */
export type Timestamp2 = number;
/**
 * The confidence score of the price
 */
export type Confidence3 = string;
/**
 * The currency for which the spot feed represents
 */
export type Currency4 = string;
/**
 * The latest time the data can be submitted on chain
 */
export type Deadline3 = number;
/**
 * The expiry for the options for the vol feed
 */
export type Expiry1 = number;
/**
 * The timestamp for which the data was created
 */
export type Timestamp3 = number;
export type SVIA = string;
export type SVIB = string;
export type SVIFwd = string;
export type SVIM = string;
export type SVIRefTau = string;
export type SVIRho = string;
export type SVISigma = string;

export interface PublicGetLatestSignedFeedsJSONRPCSchema {
  request: PublicGetLatestSignedFeedsRequestSchema;
  response: PublicGetLatestSignedFeedsResponseSchema;
}
export interface PublicGetLatestSignedFeedsRequestSchema {
  id?: string | number;
  method: Method;
  params: PublicGetLatestSignedFeedsParamsSchema;
}
export interface PublicGetLatestSignedFeedsParamsSchema {
  currency: Currency;
}
export interface PublicGetLatestSignedFeedsResponseSchema {
  id: string | number;
  result: PublicGetLatestSignedFeedsResultSchema;
}
export interface PublicGetLatestSignedFeedsResultSchema {
  fwd_data: FwdData;
  perp_data: PerpData;
  spot_data: SpotData;
  vol_data: VolData;
}
/**
 * currency -> expiry -> latest forward feed data
 */
export interface FwdData {
  [k: string]: FwdData1;
}
export interface FwdData1 {
  [k: string]: ForwardFeedDataSchema;
}
export interface ForwardFeedDataSchema {
  confidence: Confidence;
  currency: Currency1;
  deadline: Deadline;
  expiry: Expiry;
  fwd_diff: FwdDiff;
  signatures: OracleSignatureDataSchema;
  spot_aggregate_latest: SpotAggregateLatest;
  spot_aggregate_start: SpotAggregateStart;
  timestamp: Timestamp;
}
/**
 * Signatures
 */
export interface OracleSignatureDataSchema {
  signatures?: Signatures;
  signers?: Signers;
}
/**
 * currency -> feed type -> latest perp feed data
 */
export interface PerpData {
  [k: string]: PerpData1;
}
export interface PerpData1 {
  [k: string]: PerpFeedDataSchema;
}
export interface PerpFeedDataSchema {
  confidence: Confidence1;
  currency: Currency2;
  deadline: Deadline1;
  signatures: OracleSignatureDataSchema1;
  spot_diff_value: SpotDiffValue;
  timestamp: Timestamp1;
  type: Type;
}
/**
 * Signatures
 */
export interface OracleSignatureDataSchema1 {
  signatures?: Signatures;
  signers?: Signers;
}
/**
 * currency -> latest spot feed data
 */
export interface SpotData {
  [k: string]: SpotFeedDataSchema;
}
export interface SpotFeedDataSchema {
  confidence: Confidence2;
  currency: Currency3;
  deadline: Deadline2;
  price: Price;
  signatures: OracleSignatureDataSchema2;
  timestamp: Timestamp2;
}
/**
 * Signatures
 */
export interface OracleSignatureDataSchema2 {
  signatures?: Signatures;
  signers?: Signers;
}
/**
 * currency -> expiry -> latest vol feed data
 */
export interface VolData {
  [k: string]: VolData1;
}
export interface VolData1 {
  [k: string]: VolFeedDataSchema;
}
export interface VolFeedDataSchema {
  confidence: Confidence3;
  currency: Currency4;
  deadline: Deadline3;
  expiry: Expiry1;
  signatures: OracleSignatureDataSchema3;
  timestamp: Timestamp3;
  vol_data: VolSVIParamDataSchema;
}
/**
 * Signatures
 */
export interface OracleSignatureDataSchema3 {
  signatures?: Signatures;
  signers?: Signers;
}
/**
 * The SVI parameters for the vol curve
 */
export interface VolSVIParamDataSchema {
  SVI_a: SVIA;
  SVI_b: SVIB;
  SVI_fwd: SVIFwd;
  SVI_m: SVIM;
  SVI_refTau: SVIRefTau;
  SVI_rho: SVIRho;
  SVI_sigma: SVISigma;
}
